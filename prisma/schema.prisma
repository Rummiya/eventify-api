// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  email     String  @unique
  password  String
  name      String?
  avatarUrl String?

  role Role @default(USER)

  companyOwners CompanyOwner[]
  likes         EventLike[]
  comments      EventComment[]
  registrations Registration[]
  follows       CompanyFollower[]

  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
}

enum Role {
  USER
  ADMIN
  COMPANY_OWNER
}

model Company {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  name    String
  logoUrl String?
  bio     String?
  website String?

  owners    CompanyOwner[]
  events    Event[]
  followers CompanyFollower[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CompanyOwner {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  company   Company @relation(fields: [companyId], references: [id])
  companyId String  @db.ObjectId
}

model CompanyFollower {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  company   Company @relation(fields: [companyId], references: [id])
  companyId String  @db.ObjectId

  createdAt DateTime @default(now())
}

model Event {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  content  String
  imageUrl String?

  company   Company @relation(fields: [companyId], references: [id])
  companyId String  @db.ObjectId

  likes         EventLike[]
  comments      EventComment[]
  registrations Registration[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Registration {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  event   Event  @relation(fields: [eventId], references: [id])
  eventId String @db.ObjectId

  createdAt DateTime @default(now())
}

model EventLike {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  user    User   @relation(fields: [userId], references: [id])
  userId  String @db.ObjectId
  event   Event  @relation(fields: [eventId], references: [id])
  eventId String @db.ObjectId

  createdAt DateTime @default(now())
}

model EventComment {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  content String

  user    User   @relation(fields: [userId], references: [id])
  userId  String @db.ObjectId
  event   Event  @relation(fields: [eventId], references: [id])
  eventId String @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
