import fs from 'fs';

const paths = ['./ToDo.md', './BUGS.md'];
const contents = paths.map(path => fs.readFileSync(path, 'utf-8'));

contents.forEach((content, i) => {
	const total =
		(content.match(/- \[ /g) || []).length +
		(content.match(/- \[x\]/gi) || []).length;
	const done = (content.match(/- \[x\]/gi) || []).length;

	const percent = Math.round((done / total) * 100);
	const progressText = `__–ü—Ä–æ–≥—Ä–µ—Å—Å: ${done} –∏–∑ ${total} –∑–∞–¥–∞—á –≤—ã–ø–æ–ª–Ω–µ–Ω–æ (${percent}%)__ ‚úÖ`;

	const hasProgressLine = /^__–ü—Ä–æ–≥—Ä–µ—Å—Å:.*\n?/m.test(content);

	let newContent;

	if (hasProgressLine) {
		// –ï—Å–ª–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å —É–∂–µ –µ—Å—Ç—å, –∑–∞–º–µ–Ω–∏—Ç—å —Å—Ç—Ä–æ–∫—É –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –Ω–∞ –Ω–æ–≤—É—é (–±–µ–∑ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–∏—à–Ω–∏—Ö –ø–µ—Ä–µ–Ω–æ—Å–æ–≤)
		console.log('1');

		newContent = content.replace(/^__–ü—Ä–æ–≥—Ä–µ—Å—Å:.*\n?/m, progressText);
	} else {
		// –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –Ω–µ—Ç, –≤—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å –ø–µ—Ä–µ–Ω–æ—Å–æ–º —Å—Ç—Ä–æ–∫–∏
		if (paths[i].includes('ToDo.md')) {
			console.log(paths[i]);

			newContent = content.replace(/^(## üìã ToDo)/m, `$1\n\n${progressText}`);
		} else if (paths[i].includes('BUGS.md')) {
			console.log(paths[i]);

			newContent = content.replace(
				/^(## –°–ø–∏—Å–æ–∫ –±–∞–≥–æ–≤)/m,
				`$1\n\n${progressText}`
			);
		} else {
			// –ï—Å–ª–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî –æ—Å—Ç–∞–≤–∏—Ç—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
			newContent = content;
		}
	}

	fs.writeFileSync(paths[i], newContent);

	console.log(
		`‚úî –ü—Ä–æ–≥—Ä–µ—Å—Å –æ–±–Ω–æ–≤–ª—ë–Ω (${paths[i]}): ${done}/${total} (${percent}%)`
	);
});
