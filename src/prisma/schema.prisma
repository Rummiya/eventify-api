generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  email     String  @unique
  password  String
  name      String?
  avatarUrl String? @map("avatar_url")

  isBanned  Boolean @default(false) @map("is_banned")
  banReason String? @map("ban_reason")

  role   Role   @relation(fields: [roleId], references: [id])
  roleId String @map("role_id") @db.ObjectId

  companies     CompanyOwner[]
  likes         Like[]
  comments      Comment[]
  registrations Registration[]
  follows       CompanyFollower[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("user")
}

model Role {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  value    String  @unique
  isSystem Boolean @default(false) @map("is_system")
  user     User[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("role")
}

model Company {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  name    String  @unique
  logoUrl String? @map("logo_url")
  bio     String?
  website String?

  isBanned  Boolean @default(false) @map("is_banned")
  banReason String? @map("ban_reason")

  owners    CompanyOwner[]
  events    Event[]
  followers CompanyFollower[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("company")
}

model CompanyOwner {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  user      User    @relation(fields: [userId], references: [id])
  userId    String  @map("user_id") @db.ObjectId
  company   Company @relation(fields: [companyId], references: [id])
  companyId String  @map("company_id") @db.ObjectId

  @@map("company_owner")
}

model CompanyFollower {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  user      User    @relation(fields: [userId], references: [id])
  userId    String  @map("user_id") @db.ObjectId
  company   Company @relation(fields: [companyId], references: [id])
  companyId String  @map("company_id") @db.ObjectId

  createdAt DateTime @default(now()) @map("created_at")

  @@map("company_follower")
}

model Event {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  imageUrl    String?  @map("image_url")
  title       String
  description String
  date        DateTime
  time        String
  city        String
  address     String
  category    String
  capacity    Int

  isArchived Boolean @default(false)

  company   Company @relation(fields: [companyId], references: [id])
  companyId String  @map("company_id") @db.ObjectId

  likes         Like[]
  comments      Comment[]
  registrations Registration[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("event")
}

model Registration {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  user    User   @relation(fields: [userId], references: [id])
  userId  String @map("user_id") @db.ObjectId
  event   Event  @relation(fields: [eventId], references: [id])
  eventId String @map("event_id") @db.ObjectId

  createdAt DateTime @default(now()) @map("created_at")

  @@map("registration")
}

model Like {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  user    User   @relation(fields: [userId], references: [id])
  userId  String @map("user_id") @db.ObjectId
  event   Event  @relation(fields: [eventId], references: [id])
  eventId String @map("event_id") @db.ObjectId

  createdAt DateTime @default(now()) @map("created_at")

  @@map("like")
}

model Comment {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  content String

  user    User   @relation(fields: [userId], references: [id])
  userId  String @map("user_id") @db.ObjectId
  event   Event  @relation(fields: [eventId], references: [id])
  eventId String @map("event_id") @db.ObjectId

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("comment")
}
